{"version":3,"sources":["Models/Dice.ts","Models/Attribute.ts","Models/Character.ts","UI/Widget.tsx","UI/AttributesWidget.tsx","UI/SkillsWidget.tsx","Models/Skill.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["CreateDie","size","name","GetDefaultAttributes","defaults","shortName","isMental","isPhysical","GetAttributeTotal","character","attribute","attributes","get","GetAttributeSkillTotal","skills","reduce","total","skill","level","Widget","header","body","className","children","AttributeWidgetHeader","AttributesWidgetBody","map","value","base","Character","Dice","Math","ceil","d","SkillsWidgetHeader","SkillsWidgetBody","model","state","player","age","gender","bio","Map","Attributes","a","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4197540c.chunk.js","sourcesContent":["export interface Model {\r\n  name: string;\r\n  size: number;\r\n}\r\n\r\nexport function CreateDie(size: number): Model {\r\n  return { name:`d${size}`, size: size };\r\n}\r\n\r\nexport function Roll(dice: Model): number {\r\n  return Math.ceil(Math.random() * dice.size);\r\n}\r\n\r\nexport interface PoolResult {\r\n  [key: number]: number;\r\n}\r\n\r\nexport function RollPool(dice: Model[]) {\r\n  return dice.map(Roll).reduce((acc, num, _) => {\r\n    acc[num] = ++acc[num] || 1;\r\n    return acc;\r\n  }, {} as PoolResult);\r\n}\r\n","import * as Dice from \"./Dice\";\r\n\r\nexport interface Model {\r\n  name: string;\r\n  shortName: string;\r\n  isPhysical: boolean;\r\n  isMental: boolean;\r\n}\r\n\r\nexport function GetDiceFromAttributeTotal(value: number): Dice.Model[] {\r\n  if (value <= 0) return [Dice.CreateDie(2)];\r\n  if (value >= 36) return [Dice.CreateDie(20)];\r\n  return [Dice.CreateDie(Math.ceil(value / 6) * 2)];\r\n}\r\n\r\nexport function GetDefaultAttributes(): Model[] {\r\n  return defaults;\r\n}\r\n\r\n  const defaults = [\r\n    {\r\n      name: \"Power\",\r\n      shortName: \"Pow\",\r\n      isMental: false,\r\n      isPhysical: true,\r\n    },\r\n    {\r\n      name: \"Finesse\",\r\n      shortName: \"Fin\",\r\n      isMental: false,\r\n      isPhysical: true,\r\n    },\r\n    {\r\n      name: \"Resilience\",\r\n      shortName: \"Res\",\r\n      isMental: false,\r\n      isPhysical: true,\r\n    },\r\n    {\r\n      name: \"Intellect\",\r\n      shortName: \"Int\",\r\n      isMental: false,\r\n      isPhysical: true,\r\n    },\r\n    {\r\n      name: \"Wits\",\r\n      shortName: \"Wit\",\r\n      isMental: false,\r\n      isPhysical: true,\r\n    },\r\n    {\r\n      name: \"Presence\",\r\n      shortName: \"Pre\",\r\n      isMental: false,\r\n      isPhysical: true,\r\n    },\r\n  ];\r\n","import * as Attributes from \"./Attribute\";\r\nimport * as Skills from \"./Skill\";\r\n\r\nexport interface Model {\r\n  name: string;\r\n  player: string;\r\n  age: number;\r\n  gender: string;\r\n  bio: string;\r\n  attributes: Map<Attributes.Model, number>;\r\n  skills: Skills.Model[];\r\n}\r\n\r\nexport function GetAttributeTotal(\r\n  character: Model,\r\n  attribute: Attributes.Model\r\n): number {\r\n  return (\r\n    (character.attributes.get(attribute) ?? 0) + GetAttributeSkillTotal(character, attribute)\r\n  );\r\n}\r\n\r\nexport function GetAttributeSkillTotal(\r\n  character: Model,\r\n  attribute: Attributes.Model\r\n): number {\r\n  return character.skills.reduce(\r\n    (total, skill) => total + (skill.attribute === attribute ? skill.level : 0),\r\n    0\r\n  );\r\n}\r\n\r\nexport function CreateTestCharacter(): Model {\r\n  return {\r\n    name: \"test\",\r\n    player: \"test\",\r\n    age: 3,\r\n    gender: \"test\",\r\n    bio: \"test\",\r\n    attributes: new Map(Attributes.GetDefaultAttributes().map((a) => [a, 6])),\r\n    skills: [\r\n      {\r\n        attribute: Attributes.GetDefaultAttributes()[0],\r\n        level: 6,\r\n        name: \"Jumping\",\r\n      },\r\n      {\r\n        attribute: Attributes.GetDefaultAttributes()[0],\r\n        level: 4,\r\n        name: \"Climbing\",\r\n      },\r\n      {\r\n        attribute: Attributes.GetDefaultAttributes()[0],\r\n        level: 3,\r\n        name: \"Parkour\",\r\n      },\r\n    ],\r\n  };\r\n}\r\n","\r\nimport React, { FunctionComponent, ReactNode} from \"react\";\r\n\r\n\r\ntype WidgetProps = {\r\n    header:() => ReactNode,\r\n    body:() => ReactNode\r\n    className?:string\r\n};\r\n\r\nexport const Widget: FunctionComponent<WidgetProps> =  ({header, body, className, children}) => \r\n  <div className={\"card \" + className}> \r\n  <div className=\"card-header\">{header()} </div>\r\n  <div className=\"card-body\">\r\n    {body()}\r\n    </div>\r\n  </div>\r\n\r\n","import * as Character from \"../Models/Character\";\r\nimport * as Attribute from \"../Models/Attribute\"\r\nimport React, { FunctionComponent } from \"react\";\r\n\r\ntype AttributeProps = {\r\n  character: Character.Model;\r\n};\r\n\r\nexport const AttributeWidgetHeader: FunctionComponent<object> = ({}) => (\r\n  <div className=\"header\">\r\n    Attributes\r\n    <button className=\"btn-primary btn-sm btn right\"> Edit </button>\r\n  </div>\r\n);\r\n\r\nexport const AttributesWidgetBody: FunctionComponent<AttributeProps> = ({\r\n  character,\r\n}) => (\r\n  <div className=\"attribute-grid\">\r\n    <div className=\"attribute-header\">\r\n      <div className=\"attribute-title\"> Name </div>\r\n      <div className=\"attribute-base\"> Base </div>\r\n      <div className=\"attribute-skills\"> Skills </div>\r\n      <div className=\"attribute-total\"> Total </div>\r\n      <div className=\"attribute-dice\"> Dice </div>\r\n    </div>\r\n    {[...character.attributes].map(([attribute, base]) => (\r\n      <div className=\"attribute-row\">\r\n        <div className={`attribute-title ${attribute.name}-Header`}>\r\n          {\" \"}\r\n          {attribute.name}{\" \"}\r\n        </div>\r\n        <div className={`attribute-base ${attribute.name}`}> {base} </div>\r\n        <div className={`attribute-skills ${attribute.name}`}>\r\n          {\" \"}\r\n          {Character.GetAttributeSkillTotal(character, attribute)}{\" \"}\r\n        </div>\r\n        <div className={`attribute-total ${attribute.name}`}>\r\n          {\" \"}\r\n          {Character.GetAttributeTotal(character, attribute)}{\" \"}\r\n        </div>\r\n        <div className={`attribute-dice ${attribute.name}`}>\r\n          {\" \"}\r\n          {Attribute.GetDiceFromAttributeTotal(\r\n            Character.GetAttributeTotal(character, attribute)\r\n          ).map((d) => d.name)}{\" \"}\r\n        </div>\r\n      </div>\r\n    ))}\r\n  </div>\r\n);\r\n  \r\n\r\n","import * as Character from \"../Models/Character\";\r\nimport * as Skill from \"../Models/Skill\";\r\nimport React, { FunctionComponent, Fragment } from \"react\";\r\n\r\ntype SkillProps = {\r\n  character: Character.Model;\r\n};\r\n\r\n\r\nexport const SkillsWidgetHeader: FunctionComponent<object> = ({}) => (\r\n  <div className=\"header\">\r\n    Skills \r\n    <button className=\"btn-primary btn-sm btn right\"> Add New </button>\r\n  </div>\r\n);\r\n\r\nexport const SkillsWidgetBody: FunctionComponent<SkillProps> = ({\r\n  character,\r\n}) => (\r\n  <Fragment>\r\n    <div className=\"skill-grid\">\r\n      <div className=\"skill-header\">\r\n        <div className=\"skill-name\">Skill Name</div>\r\n        <div className=\"skill-level\"> Level </div>\r\n        <div className=\"skill-attribute\"> Attribute </div>\r\n        <div className=\"skill-dice\"> Dice </div>\r\n      </div>\r\n      {character.skills.map((skill) => (\r\n        <div className=\"skill-row\">\r\n          <div className={`skill-name`}> {skill.name} </div>\r\n          <div className={`skill-level`}> {skill.level} </div>\r\n          <div className={`skill-attribute`}> {skill.attribute.name} </div>\r\n          <div className={`skill-dice`}> {Skill.ToDie(skill).name} </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </Fragment>\r\n);\r\n","import * as Attribute from \"./Attribute\";\r\nimport * as Dice from \"./Dice\";\r\n\r\nexport interface Model {\r\n  name: string;\r\n  level: number;\r\n  attribute: Attribute.Model;\r\n}\r\n\r\nexport function ToDie(model: Model) {\r\n  return Dice.CreateDie(model.level * 2);\r\n}\r\n","import * as Character from \"./Models/Character\";\nimport { Widget } from \"./UI/Widget\";\nimport { AttributesWidgetBody, AttributeWidgetHeader } from \"./UI/AttributesWidget\";\nimport { SkillsWidgetBody, SkillsWidgetHeader } from \"./UI/SkillsWidget\";\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nconst state = {\n  character: Character.CreateTestCharacter(),\n};\n\nfunction App() {\n  return (\n    <div className=\"App card-deck\">\n      <Widget\n        header={() => <AttributeWidgetHeader />}\n        className=\"attribute-widget\"\n        body={() => (\n          <AttributesWidgetBody\n            character={state.character}\n          ></AttributesWidgetBody>\n        )}\n      ></Widget>\n      <Widget\n        header={() => <SkillsWidgetHeader/>}\n        body={() => (\n          <SkillsWidgetBody character={state.character}></SkillsWidgetBody>\n        )}\n      ></Widget>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}