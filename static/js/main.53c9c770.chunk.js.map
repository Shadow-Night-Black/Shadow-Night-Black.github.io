{"version":3,"sources":["UI/Widgets/Widget.tsx","UI/Dialogs/Dialog.tsx","Models/Dice.ts","Models/Attribute.ts","Models/Skill.ts","Helpers/Collections.ts","Models/Fated.ts","Models/Blessings.ts","Models/Character.ts","UI/Widgets/AttributesWidget.tsx","UI/Widgets/SkillsWidget.tsx","UI/Widgets/TotemWidget.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Widget","header","body","className","Dialog","props","updateUICharacter","map","setState","oldState","character","model","saveChanges","state","close","dialogState","onClose","updateUI","uiState","dialog","isOpen","node","closed","this","old","role","type","aria-label","onClick","aria-hidden","data-dismiss","React","Component","CreateDie","size","name","GetDiceFromAttributeTotal","value","Dice","Math","floor","GetDefaultAttributes","defaults","shortName","isMental","isPhysical","reduce","acc","a","concat","key","length","ToDie","level","NewSkill","skill","collection","attribute","skills","val","defaultFated","find","x","GetDefaultFated","defaultBlessings","effect","fated","GetAttributeTotal","inCity","attributes","get","GetAttributeSkillTotal","totem","total","defaultSkillsInfo","CreateTestCharacter","char","player","age","gender","bio","Map","blessings","forEach","push","WidgetHeader","openDialog","update","editMode","updateCharacter","WidgetBody","AttributeWidgetRow","baseAttributeElement","baseValue","defaultValue","onChange","event","newVal","target","valueAsNumber","isNaN","oldChar","newAttributes","set","d","appControls","remove","onBlur","e","max","min","newval","Number","selected","EditBodyRow","pred","filter","s","WidgetBodyRow","b","App","ui","updateModel","oncloseCallback","AppControls","WidgetProps","AttributeWidgetConstructor","BlessingsWidgetConstructor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.53c9c770.chunk.js","sourcesContent":["import React, { FunctionComponent, ReactNode } from \"react\";\r\nimport { AppControls, ModelState } from \"../../App\";\r\nimport { Character } from \"../../Models/Character\";\r\n\r\nexport type WidgetConstructor = (props:WidgetProps) => Widget\r\n\r\nexport interface Widget {\r\n  header: ReactNode;\r\n  body: ReactNode;\r\n  className: string;\r\n}\r\n\r\nexport interface WidgetProps {\r\n  appControls: AppControls<Character>,\r\n  state: ModelState,\r\n  editMode:boolean\r\n}\r\n\r\nexport const Widget: FunctionComponent<Widget> = ({\r\n  header,\r\n  body,\r\n  className,\r\n}) => (\r\n  <div className={`card ${className ? className : \"\"}`}>\r\n    <div className=\"card-header\">{header} </div>\r\n    <div className=\"card-body\">{body}</div>\r\n  </div>\r\n);\r\n","import React, { ReactNode } from \"react\";\r\nimport \"./Dialog.css\";\r\nimport { Character } from \"../../Models/Character\";\r\nimport { Update, UIState, ModelState } from \"../../App\";\r\n\r\ntype DialogProps = {\r\n  dialogState: DialogParams;\r\n  model: ModelState;\r\n  saveChanges: Update<Character>;\r\n  updateUI: Update<UIState>;\r\n};\r\n\r\nexport type DialogBody = (character: Character, update: Update<Character>) => ReactNode;\r\n\r\nexport type DialogParams = {\r\n  isOpen: boolean;\r\n  onClose?: () => void;\r\n  node: DialogBody;\r\n};\r\n\r\ntype DialogState = ModelState & {\r\n  closed:boolean\r\n}\r\n\r\n\r\nexport class Dialog extends React.Component<DialogProps, DialogState> {\r\n  constructor(props: DialogProps) {\r\n    super(props);\r\n\r\n    this.state = {...props.model, closed: true };\r\n  }\r\n\r\n  updateUICharacter: Update<Character> = (map) => {\r\n    this.setState((oldState) => ({ ...oldState, character: map(oldState.character ?? this.props.model) }));\r\n  };\r\n\r\n  saveChanges = () => {\r\n      this.props.saveChanges(() => this.state.character);\r\n      this.close();\r\n  };\r\n\r\n  close = () => {\r\n    if (this.props.dialogState.onClose) this.props.dialogState.onClose();\r\n    this.props.updateUI((uiState) => ({\r\n      ...uiState,\r\n      dialog: { isOpen: false, node: () => null, close: () => {} },\r\n    }));\r\n\r\n    this.setState((oldState) => ({...oldState, closed: true}));\r\n  };\r\n\r\n  render() {\r\n    const { dialogState } = this.props;\r\n    if (!dialogState.isOpen) return null;\r\n\r\n    const { closed }  = this.state;\r\n    let character = this.state.character;\r\n\r\n    if (closed) {\r\n      character = this.props.model.character;\r\n      this.setState((old) => ({...old, closed:false}))\r\n    }\r\n\r\n    return (\r\n      <div className='dialog-backdrop'>\r\n        <div className='modal-dialog' role='document'>\r\n          <div className='modal-content'>\r\n            <div className='modal-header'>\r\n              <h5 className='modal-title'>Modal title</h5>\r\n              <button type='button' className='close' aria-label='Close' onClick={this.close}>\r\n                <span aria-hidden='true'>&times;</span>\r\n              </button>\r\n            </div>\r\n            <div className='modal-body'>{dialogState.node(character, this.updateUICharacter)}</div>\r\n            <div className='modal-footer'>\r\n              <button type='button' className='btn btn-primary' onClick={this.saveChanges}>\r\n                Save changes\r\n              </button>\r\n              <button type='button' className='btn btn-secondary' data-dismiss='modal' onClick={this.close}>\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export interface Dice {\r\n  name: string;\r\n  size: number;\r\n}\r\n\r\nexport function CreateDie(size: number): Dice {\r\n  return { name:`d${size}`, size: size };\r\n}\r\n\r\nexport function Roll(dice: Dice): number {\r\n  return Math.ceil(Math.random() * dice.size);\r\n}\r\n\r\nexport interface PoolResult {\r\n  [key: number]: number;\r\n}\r\n\r\nexport function RollPool(dice: Dice[]) {\r\n  return dice.map(Roll).reduce((acc, num, _) => {\r\n    acc[num] = ++acc[num] || 1;\r\n    return acc;\r\n  }, {} as PoolResult);\r\n}\r\n","import * as Dice from \"./Dice\";\r\nimport { Identable } from \"../Helpers/Collections\";\r\n\r\nexport type Attribute = Identable & AttributeData\r\n\r\ninterface AttributeData {\r\n  name: string;\r\n  shortName: string;\r\n  isPhysical: boolean;\r\n  isMental: boolean;\r\n}\r\n\r\nexport function GetDiceFromAttributeTotal(value: number): Dice.Dice[] {\r\n  if (value <= 0) return [Dice.CreateDie(2)];\r\n  if (value >= 36) return [Dice.CreateDie(20)];\r\n  return [Dice.CreateDie(2 + Math.floor(value/ 6) * 2)];\r\n}\r\n\r\nexport function GetDefaultAttributes(): Attribute[] {\r\n  return defaults;\r\n}\r\n\r\n  const defaults:Attribute[] = [\r\n    {\r\n      name: \"Power\",\r\n      shortName: \"Pow\",\r\n      isMental: false,\r\n      isPhysical: true,\r\n    },\r\n    {\r\n      name: \"Finesse\",\r\n      shortName: \"Fin\",\r\n      isMental: false,\r\n      isPhysical: true,\r\n    },\r\n    {\r\n      name: \"Resilience\",\r\n      shortName: \"Res\",\r\n      isMental: false,\r\n      isPhysical: true,\r\n    },\r\n    {\r\n      name: \"Intellect\",\r\n      shortName: \"Int\",\r\n      isMental: false,\r\n      isPhysical: true,\r\n    },\r\n    {\r\n      name: \"Wits\",\r\n      shortName: \"Wit\",\r\n      isMental: false,\r\n      isPhysical: true,\r\n    },\r\n    {\r\n      name: \"Presence\",\r\n      shortName: \"Pre\",\r\n      isMental: false,\r\n      isPhysical: true,\r\n    },\r\n  ].reduce((acc, a) => acc.concat({...a, key:acc.length + 1}), [] as Attribute[]);\r\n","import * as Dice from \"./Dice\";\r\nimport { Attribute, GetDefaultAttributes } from \"./Attribute\";\r\nimport { Character } from \"./Character\";\r\nimport { Identable, nextId } from \"../Helpers/Collections\";\r\n\r\n\r\nexport type Skill = Identable & SkillData;\r\n\r\nexport function ToDie(model: Skill) {\r\n  return Dice.CreateDie(model.level * 2);\r\n}\r\n\r\nexport function NewSkill(character: Character, skill?:Partial<SkillData>): Skill {\r\n  return {\r\n    name: skill?.name ?? \"New Skill\",\r\n    level: skill?.level ?? 2,\r\n    attribute: skill?.attribute ?? GetDefaultAttributes()[0],\r\n    key: nextId(character.skills),\r\n  };\r\n}\r\n\r\ninterface SkillData{\r\n  name: string;\r\n  level: number;\r\n  attribute: Attribute;\r\n}","export interface Identable {key:number}\r\n\r\nexport function nextId(collection:Identable[]):number {\r\n    return collection.reduce((acc, val) => acc > val.key? acc : val.key, 0 ) + 1;\r\n}","import {Attribute, GetDefaultAttributes} from \"./Attribute\"\r\n\r\nexport interface Fated {\r\n    name:string,\r\n    attribute:Attribute\r\n}\r\n\r\nconst defaultFated:Fated[] = [{\r\n    name: \"Warick\",\r\n    attribute: GetDefaultAttributes().find(x => x.shortName === \"Pow\")!\r\n}]\r\n\r\nexport function GetDefaultFated() { return defaultFated };","import { Fated, GetDefaultFated } from \"./Fated\";\r\n\r\nexport interface Blessing {\r\n  name: string;\r\n  fated: Fated;\r\n  level: number;\r\n  effect: string;\r\n}\r\n\r\nexport function GetDefaultBlessings() {\r\n    return defaultBlessings;\r\n}\r\n\r\nconst defaultBlessings: Blessing[] = [\r\n  {\r\n    name: \"Strengthen\",\r\n    effect:\r\n      \"Add an additional Power attribute die to a Power action's roll total.\",\r\n    level: 1,\r\n    fated: GetDefaultFated().find((x) => x.attribute.shortName === \"Pow\")!,\r\n  },\r\n  {\r\n    name: \"Flex\",\r\n    effect:\r\n      \"Increase one adjacent entity’s Power attribute die size by two pips until the next rest.\",\r\n    level: 1,\r\n    fated: GetDefaultFated().find((x) => x.attribute.shortName === \"Pow\")!,\r\n  },\r\n  {\r\n    name: \"Bulk\",\r\n    effect:\r\n      \"You or one adjacent entity can use the sum of two Power dice you roll as the roll total for any one physical action.\",\r\n    level: 1,\r\n    fated: GetDefaultFated().find((x) => x.attribute.shortName === \"Pow\")!,\r\n  },\r\n  {\r\n    name: \"Punish\",\r\n    effect:\r\n      \"Double the roll total of the next physical action against one selected entity.\",\r\n    level: 1,\r\n    fated: GetDefaultFated().find((x) => x.attribute.shortName === \"Pow\")!,\r\n  },\r\n  {\r\n    name: \"Overpower\",\r\n    effect:\r\n      \"One selected entity takes their lowest die value for their next three Power actions.\",\r\n    level: 1,\r\n    fated: GetDefaultFated().find((x) => x.attribute.shortName === \"Pow\")!,\r\n  },\r\n  {\r\n    name: \"Retaliate\",\r\n    effect:\r\n      \"Inflict degrees of a physical status condition you have on up to three selected targets within an encounter - 1 degree on three entities, 2 degrees on 2 entities, three degrees on 1 entity. These do not affect spirit or adrenaline\",\r\n    level: 1,\r\n    fated: GetDefaultFated().find((x) => x.attribute.shortName === \"Pow\")!,\r\n  },\r\n];\r\n","import { Totem } from \"./Totem\";\r\nimport { Skill, NewSkill } from \"./Skill\";\r\nimport { Attribute, GetDefaultAttributes } from \"./Attribute\";\r\nimport { GetDefaultFated } from \"./Fated\";\r\nimport { GetDefaultBlessings } from \"./Blessings\";\r\n\r\nexport interface Character {\r\n  name: string;\r\n  player: string;\r\n  age: number;\r\n  gender: string;\r\n  bio: string;\r\n  attributes: Map<Attribute, number>;\r\n  skills: Skill[];\r\n  totem: Totem;\r\n}\r\n\r\nexport function GetAttributeTotal(character: Character, attribute: Attribute, inCity: boolean): number {\r\n  return (\r\n    (character.attributes.get(attribute) || 0) +\r\n    GetAttributeSkillTotal(character, attribute) +\r\n    (!inCity && character.totem.fated.attribute === attribute ? 6 : 0)\r\n  );\r\n}\r\n\r\nexport function GetAttributeSkillTotal(character: Character, attribute: Attribute): number {\r\n  return character.skills.reduce((total, skill) => total + (skill.attribute === attribute ? skill.level : 0), 0);\r\n}\r\n\r\nconst defaultSkillsInfo = [\r\n  {\r\n    level: 6,\r\n    name: \"Jumping\",\r\n  },\r\n  {\r\n    level: 4,\r\n    name: \"Climbing\",\r\n  },\r\n  {\r\n    level: 3,\r\n    name: \"Parkour\",\r\n  },\r\n];\r\n\r\nexport function CreateTestCharacter(): Character {\r\n  const char: Character = {\r\n    name: \"test\",\r\n    player: \"test\",\r\n    age: 3,\r\n    gender: \"test\",\r\n    bio: \"test\",\r\n    attributes: new Map(GetDefaultAttributes().map((a) => [a, 6])),\r\n    skills: [],\r\n    totem: { blessings: GetDefaultBlessings(), fated: GetDefaultFated()[0] },\r\n  };\r\n  defaultSkillsInfo.forEach((x) => char.skills.push(NewSkill(char, x)));\r\n\r\n  return char;\r\n}\r\n","import { Attribute, GetDefaultAttributes, GetDiceFromAttributeTotal } from \"../../Models/Attribute\";\r\nimport React, { FunctionComponent, ReactElement, Fragment } from \"react\";\r\nimport { Character, GetAttributeSkillTotal, GetAttributeTotal } from \"../../Models/Character\";\r\nimport { Update, openDialog } from \"../../App\";\r\nimport { WidgetConstructor } from \"./Widget\";\r\nimport \"./AttributesWidget.css\";\r\n\r\ntype AttributeBodyProps = {\r\n  character: Character;\r\n  editMode: boolean;\r\n  updateCharacter: Update<Character>;\r\n};\r\n\r\ntype AttributeRowProps = {\r\n  character: Character;\r\n  attribute: Attribute;\r\n  editMode: boolean;\r\n  updateCharacter: Update<Character>;\r\n};\r\n\r\ntype AttributeHeaderProps = {\r\n  character: Character;\r\n  openDialog: openDialog;\r\n};\r\n\r\nexport const AttributeWidgetConstructor: WidgetConstructor = ({ appControls, state }) => {\r\n  return {\r\n    header: <WidgetHeader character={state.character} openDialog={appControls.openDialog} />,\r\n    body: <WidgetBody character={state.character} updateCharacter={appControls.update} editMode={false} />,\r\n    className: \"attribute-widget\",\r\n  };\r\n};\r\n\r\nconst WidgetHeader: FunctionComponent<AttributeHeaderProps> = ({ openDialog }) => (\r\n  <div className='header'>\r\n    Attributes\r\n    <button\r\n      className='btn-primary btn-sm btn right'\r\n      onClick={() => {\r\n        openDialog((char, update: Update<Character>) => (\r\n          <WidgetBody {...{ editMode: true, character: char, updateCharacter: update }} />\r\n        ));\r\n      }}\r\n    >\r\n      Edit\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport const className = \"attribute-widget\";\r\n\r\nexport const WidgetBody: FunctionComponent<AttributeBodyProps> = ({ character, editMode, updateCharacter }) => (\r\n  <table className='attribute-grid'>\r\n    <thead className='attribute-header'>\r\n      <tr>\r\n        <th className='attribute-title'> Name </th>\r\n        <th className='attribute-base'> Base </th>\r\n        <th className='attribute-skills'> Skills </th>\r\n        <th className='attribute-total'> Total </th>\r\n        <th className='attribute-dice'> Dice </th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {GetDefaultAttributes().map((attribute) => (\r\n        <AttributeWidgetRow\r\n          updateCharacter={updateCharacter}\r\n          editMode={editMode}\r\n          attribute={attribute}\r\n          character={character}\r\n        />\r\n      ))}\r\n    </tbody>\r\n  </table>\r\n);\r\n\r\nconst AttributeWidgetRow: FunctionComponent<AttributeRowProps> = ({\r\n  attribute,\r\n  character,\r\n  editMode,\r\n  updateCharacter,\r\n}) => {\r\n  const baseValue = character.attributes.get(attribute);\r\n  let baseAttributeElement: ReactElement;\r\n  if (editMode)\r\n    baseAttributeElement = (\r\n      <input\r\n        type='number'\r\n        defaultValue={baseValue}\r\n        className={`attribute-base`}\r\n        onChange={(event) => {\r\n          const newVal = event.target.valueAsNumber;\r\n          if (!isNaN(newVal))\r\n            updateCharacter((oldChar: Character) => {\r\n              const newAttributes = new Map(oldChar.attributes);\r\n              newAttributes.set(attribute, newVal);\r\n              return { ...oldChar, attributes: newAttributes };\r\n            });\r\n        }}\r\n      />\r\n    );\r\n  else baseAttributeElement = <Fragment> {baseValue} </Fragment>;\r\n\r\n  return (\r\n    <tr className='attribute-row'>\r\n      <td className={`attribute-title ${attribute.name}`}>{attribute.name}</td>\r\n      <td className={`attribute-base ${attribute.name}`}> {baseAttributeElement} </td>\r\n      <td className={`attribute-skills ${attribute.name}`}>{GetAttributeSkillTotal(character, attribute)}</td>\r\n      <td className={`attribute-total ${attribute.name}`}>{GetAttributeTotal(character, attribute, true)}</td>\r\n      <td className={`attribute-dice ${attribute.name}`}>\r\n        {GetDiceFromAttributeTotal(GetAttributeTotal(character, attribute, true)).map((d) => d.name)} (\r\n        {GetDiceFromAttributeTotal(GetAttributeTotal(character, attribute, false)).map((d) => d.name)})\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { WidgetConstructor, WidgetProps } from \"./Widget\";\r\nimport { Skill, ToDie, NewSkill } from \"../../Models/Skill\";\r\nimport { AppControls } from \"../../App\";\r\nimport \"./SkillsWidget.css\";\r\nimport { GetDefaultAttributes } from \"../../Models/Attribute\";\r\n\r\nexport const SkillsWidgetConstructor: WidgetConstructor = (props) => ({\r\n  header: <WidgetHeader {...props} />,\r\n  body: <WidgetBody {...props} />,\r\n  className: \"skill-widget\",\r\n});\r\n\r\nconst WidgetHeader: FunctionComponent<WidgetProps> = ({ appControls, state }) => (\r\n  <div className='header'>\r\n    Skills\r\n    <button\r\n      className='btn-primary btn-sm btn right'\r\n      onClick={() => {\r\n        appControls.openDialog((character, updateCharacter) => (\r\n          <WidgetBody\r\n            editMode={true}\r\n            appControls={{ ...appControls, update: updateCharacter }}\r\n            state={{ ...state, character }}\r\n          />\r\n        ));\r\n      }}\r\n    >\r\n      Edit\r\n    </button>\r\n  </div>\r\n);\r\n\r\nconst WidgetBody: FunctionComponent<WidgetProps> = ({ state, editMode, appControls }) => {\r\n  return (\r\n    <table className='skill-grid table-condensed'>\r\n      <thead className='skill-header'>\r\n        <tr>\r\n        <th className='skill-name'>Skill Name</th>\r\n        <th className='skill-level'> Level </th>\r\n        <th className='skill-attribute'> Attribute </th>\r\n        <th className='skill-dice'> Dice </th>\r\n        <th className={\"skill-delete\"}> </th>\r\n</tr>\r\n      </thead>\r\n      <tbody>\r\n      {state.character.skills.map((skill) =>\r\n        editMode\r\n          ? EditBodyRow(skill, {\r\n              ...appControls,\r\n              remove: (pred) => appControls.update((old) => ({ ...old, skills: old.skills.filter((s) => !pred(s)) })),\r\n              update: (map) =>\r\n                appControls.update((old) => ({ ...old, skills: old.skills.map((s) => (s !== skill ? s : map(s))) })),\r\n            })\r\n          : WidgetBodyRow(skill)\r\n      )}\r\n      <div className='skill-add'>\r\n        {editMode ? (\r\n          <button\r\n            className='btn btn-sm btn-success'\r\n            onClick={() => {\r\n              appControls.update((old) => ({ ...old, skills: old.skills.concat(NewSkill(state.character)) }));\r\n            }}\r\n          >\r\n            Add new skill\r\n          </button>\r\n        ) : null}\r\n      </div>\r\n</tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nfunction EditBodyRow(skill: Skill, { update, remove }: AppControls<Skill>): JSX.Element {\r\n  return (\r\n    <tr className={`skill-row ${skill.attribute.name}`} key={skill.key}>\r\n      <td className={`skill-name`}>\r\n        <input\r\n          className='skill-name-input'\r\n          defaultValue={skill.name}\r\n          onBlur={(e) => {\r\n            const val = e.target.value;\r\n            return update((old) => ({ ...old, name: val }));\r\n          }}\r\n        ></input>{\" \"}\r\n      </td>\r\n      <td className='skill-level'>\r\n        <input\r\n          type='number'\r\n          max={6}\r\n          min={2}\r\n          defaultValue={skill.level}\r\n          className={`skill-level`}\r\n          onChange={(event) => {\r\n            const newVal = event.target.valueAsNumber;\r\n            if (!isNaN(newVal))\r\n              update((old) => {\r\n                return { ...old, level: newVal };\r\n              });\r\n          }}\r\n        />\r\n      </td>\r\n      <td className={`skill-attribute`}>\r\n        <select  className=\"btn\"\r\n          onChange={(e) => {\r\n            const newval = GetDefaultAttributes().find((a) => a.key === Number(e.target.value));\r\n            if (newval) update((old) => ({ ...old, attribute: newval }));\r\n          }}\r\n        >\r\n          {GetDefaultAttributes().map((a) => (\r\n            <option value={a.key} selected={skill.attribute === a}>{a.name} </option>\r\n          ))}\r\n        </select>\r\n      </td>\r\n      <td className={`skill-dice`}> {ToDie(skill).name} </td>\r\n      <td className={\"skill-delete\"}>\r\n        <button\r\n          type='button'\r\n          className='btn btn-outline-danger btn-sm btn right'\r\n          onClick={() =>\r\n            remove((old) => {\r\n              return old === skill;\r\n            })\r\n          }\r\n        >\r\n          x\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\nfunction WidgetBodyRow(skill: Skill): JSX.Element {\r\n  return (\r\n    <tr className={`skill-row ${skill.attribute.name}`} key={skill.key}>\r\n      <td className={`skill-name`}> {skill.name} </td>\r\n      <td className={`skill-level`}> {skill.level} </td>\r\n      <td className={`skill-attribute`}> {skill.attribute.name} </td>\r\n      <td className={`skill-dice`}> {ToDie(skill).name} </td>\r\n      <td className={\"skill-delete\"}> </td>\r\n    </tr>\r\n  );\r\n}\r\n","import * as Character from \"../../Models/Character\";\r\nimport React, { FunctionComponent } from \"react\";\r\nimport { WidgetConstructor } from \"./Widget\";\r\n\r\ntype BlessingsBodyProps = {\r\n  character: Character.Character;\r\n};\r\ntype BlessingsHeaderProps = {\r\n  character: Character.Character;\r\n};\r\n\r\nexport const BlessingsWidgetConstructor: WidgetConstructor = ({ state }) => ({\r\n  header: <WidgetHeader character={state.character} />,\r\n  body: <WidgetBody character={state.character} />,\r\n  className: \"blessing-widget\",\r\n});\r\n\r\nconst WidgetHeader: FunctionComponent<BlessingsHeaderProps> = ({ character }) => (\r\n  <div className={`header`}>\r\n    Totem - {character.totem.fated.name}\r\n    <button className='btn-primary btn-sm btn right'> Edit </button>\r\n  </div>\r\n);\r\n\r\nconst WidgetBody: FunctionComponent<BlessingsBodyProps> = ({ character }) => (\r\n  <table className='blessing-grid'>\r\n    <thead className='blessing-header'>\r\n      <tr>\r\n        <th className='blessing-name'> Name </th>\r\n        <th className='blessing-fated'> Fated </th>\r\n        <th className='blessing-level'> Level </th>\r\n        <th className='blessing-effect'> Effect </th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {character.totem.blessings.map((b) => (\r\n        <tr className={`blessing-row ${b.fated.attribute.name}`}>\r\n          <td className='blessing-name'> {b.name} </td>\r\n          <td className='blessing-fated'> {b.fated.name} </td>\r\n          <td className='blessing-level'> {b.level} </td>\r\n          <td className='blessing-effect'> {b.effect} </td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  </table>\r\n);\r\n","import { Widget, WidgetProps } from \"./UI/Widgets/Widget\";\r\nimport React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport { Dialog, DialogParams, DialogBody } from \"./UI/Dialogs/Dialog\";\r\nimport { CreateTestCharacter, Character } from \"./Models/Character\";\r\nimport { AttributeWidgetConstructor } from \"./UI/Widgets/AttributesWidget\";\r\nimport { SkillsWidgetConstructor } from \"./UI/Widgets/SkillsWidget\";\r\nimport { BlessingsWidgetConstructor } from \"./UI/Widgets/TotemWidget\";\r\n\r\ntype AppState= {\r\n  ui: UIState,\r\n  model: ModelState\r\n}\r\n\r\nexport interface ModelState {\r\n  character: Character;\r\n}\r\n\r\nexport interface AppControls<T> {\r\n  openDialog: openDialog;\r\n  update: Update<T>;\r\n  remove: Delete<T> ;\r\n}\r\n\r\nexport type openDialog = (node: DialogBody, oncloseCallback?: () => void) => void;\r\nexport type Update<T> = (update: (old: T) => T) => void;\r\nexport type Delete<T> = (update: (old: T) => boolean) => void;\r\n\r\nexport interface UIState {\r\n  dialog: DialogParams;\r\n}\r\n\r\nclass App extends React.Component<{}, AppState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      model: { character: CreateTestCharacter()},\r\n      ui: {\r\n        dialog: {\r\n          isOpen: false,\r\n          onClose: () => {},\r\n          node: () => null,\r\n        },\r\n      },\r\n    };\r\n  }\r\n\r\n  updateUI:Update<UIState> = (map) => {\r\n    this.setState((state) => ({ ...state, ui: map(state.ui) }));\r\n  };\r\n\r\n  updateCharacter:Update<Character> = (map) => {\r\n    this.updateModel((model) => ({ ...model, character: map(model.character) }));\r\n  };\r\n\r\n  updateModel:Update<ModelState> = (map) => {\r\n    this.setState((state) => ({ ...state, model: map(state.model) }));\r\n  };\r\n\r\n  openDialog: openDialog = (node, oncloseCallback?) => {\r\n    this.updateUI((uiState) => ({\r\n      ...uiState,\r\n      dialog: {\r\n        isOpen: true,\r\n        node: node,\r\n        onClose: oncloseCallback,\r\n      },\r\n    }));\r\n  };\r\n\r\n  AppControls: AppControls<Character> = {\r\n    openDialog: this.openDialog,\r\n    update: this.updateCharacter,\r\n    remove: () => {}\r\n  };\r\n\r\n  WidgetProps: ()=> WidgetProps  = () => ({\r\n    appControls: this.AppControls,\r\n    state: this.state.model,\r\n    editMode: false,\r\n  })\r\n\r\n  render() {\r\n    return (\r\n      <div className='App card-columns'>\r\n        <Widget {...AttributeWidgetConstructor(this.WidgetProps())}></Widget>\r\n        <Widget {...SkillsWidgetConstructor(this.WidgetProps())}></Widget>\r\n        <Widget {...BlessingsWidgetConstructor(this.WidgetProps())}></Widget>\r\n        <Dialog\r\n          updateUI={this.updateUI}\r\n          saveChanges={this.updateCharacter}\r\n          model={this.state.model}\r\n          dialogState={this.state.ui.dialog}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}