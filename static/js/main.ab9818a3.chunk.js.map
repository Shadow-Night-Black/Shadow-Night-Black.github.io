{"version":3,"sources":["UI/Character/Dialogs/Dialog.tsx","UI/Character/Widgets/Widget.tsx","Models/Dice.ts","Models/Skill.ts","Models/Helpers/Collections.ts","Models/Attribute.ts","Models/Fated.ts","Models/Blessings.ts","Models/Character.ts","Models/Helpers/JsonConverter.ts","Models/Interfaces/Lenses.tsx","UI/Character/Widgets/AttributesWidget.tsx","UI/Character/Widgets/SkillsWidget.tsx","Models/Totem.ts","UI/Controls/Dropdown.tsx","UI/Character/Widgets/TotemWidget.tsx","UI/Character/Dashboard.tsx","serviceWorker.ts","UI/Sidebar/Sidebar.tsx","UI/Charts/Simulations.ts","UI/Charts/Dice/DicePoolSelector.tsx","UI/Charts/Dice/Dashboard.tsx","UI/Charts/Chart.ts","index.tsx"],"names":["Dialog","updateUI","map","props","old","dialog","model","saveChanges","appControls","update","dialogState","close","uiState","isOpen","body","header","setState","oldState","closed","this","state","className","role","editMode","type","aria-label","onClick","aria-hidden","data-dismiss","React","Component","Widget","openDialog","EditInDialogButton","CreateDie","size","name","Roll","dice","Math","ceil","random","DicePoolToString","pool","combined","reduce","acc","value","set","get","Map","number","join","poolFormat","RollPool","entries","total","roll","amount","max","ToDie","Dice","level","NewSkill","character","skill","collection","attribute","GetAttributes","key","skills","val","GetDiceFromAttributeTotal","floor","GetDefaultAttributes","defaults","shortName","isMental","isPhysical","a","i","defaultFated","x","GetDefaultFated","GetDefaultBlessings","defaultBlessings","fated","GetAttributeTotal","inCity","GetAttributeBaseValue","GetAttributeSkillTotal","totem","some","f","nexusBonus","item","attributes","find","baseValue","Error","defaultSkillsInfo","CreateTestCharacter","char","player","age","gender","bio","blessings","selected","forEach","push","GetBlessingsList","filter","b","includes","slice","UpdateSkillList","UpdateAttributeList","JsonToCharacter","json","saveData","JSON","parse","version","data","saved","GetCollectionLens","add","concat","updated","s","remove","AttributeWidgetRow","baseAttributeElement","updateCharacter","attributeLens","defaultValue","onChange","event","newVal","target","valueAsNumber","isNaN","d","AttributeWidgetConstructor","SkillsWidget","skillLens","onBlur","e","min","newval","Number","EditBodyRow","WidgetBodyRow","UpdateFatedList","BuildOption","element","RemoveOption","BlessingsWidget","fatedLens","t","fatedDisplay","newKey","parseInt","newFated","addButton","length","updateTotem","blessing","console","log","effect","EditBlessingsRow","DisplayBlessingsRow","App","ui","updateModel","newState","localStorage","setItem","stringify","CharacterToJson","AppControls","WidgetProps","savedData","getItem","sidebar","Boolean","window","location","hostname","match","Sidebar","icon","faBars","color","to","faCloudUploadAlt","faCloudDownloadAlt","simulate","numberOfSimulation","method","results","index","result","ToChartData","y","sort","DicePoolSelector","updateDicePool","p","onInput","HTMLInputElement","split","matchAll","Array","fill","DiceDashboard","useState","getPools","updatePools","labels","datasets","pools","label","colour","Color","borderColor","toString","showLine","cubicInterpolationMode","Dataset","reduceRight","ProbabilitySimulation","rotate","newValue","style","height","width","options","scales","xAxes","scaleLabel","labelString","display","ticks","stepSize","yAxes","ReactDOM","render","StrictMode","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ab9818a3.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\r\nimport \"./Dialog.scss\";\r\nimport { UIState, AppControls } from \"../Dashboard\";\r\nimport { Update } from \"../../../Models/Interfaces/Lenses\";\r\nimport { WidgetProps } from \"../Widgets/Widget\";\r\n\r\ntype DialogProps<T> = {\r\n  dialogState: DialogParams<T>;\r\n  appControls: AppControls<T>;\r\n  updateUI: Update<UIState<T>>;\r\n};\r\n\r\nexport type DialogSection<T> = FunctionComponent<WidgetProps<T>>\r\n\r\nexport type DialogParams<T> = {\r\n  isOpen: boolean;\r\n  body: DialogSection<T>\r\n  header: DialogSection<T>\r\n  model: T;\r\n};\r\n\r\nexport function EditInDialogButton<T>(appControls:AppControls<T>, header:DialogSection<T>, body:DialogSection<T> ) {\r\nreturn <button\r\n      className='btn-primary btn-sm btn '\r\n      onClick={() => {\r\n        appControls.openDialog(header, body);\r\n      }}\r\n    >\r\n      Edit\r\n    </button>\r\n}\r\n\r\n\r\nexport class Dialog<T> extends React.Component<DialogProps<T>, {}> {\r\n\r\n  updateUI: Update<T> = (map) => {\r\n    this.props.updateUI(old => ({...old, dialog:{...old.dialog, model:map(old.dialog.model)}}))\r\n  };\r\n\r\n  saveChanges = () => {\r\n      this.props.appControls.update(() => this.props.dialogState.model);\r\n      this.close();\r\n  };\r\n\r\n  close = () => {\r\n    this.props.updateUI((uiState) => ({\r\n      ...uiState,\r\n      dialog: {...this.props.dialogState, isOpen: false, body: () => null, header: () => null},\r\n    }));\r\n\r\n    this.setState((oldState) => ({...oldState, closed: true}));\r\n  };\r\n\r\n  render() {\r\n    const { dialogState } = this.props;\r\n    if (!dialogState.isOpen) return null;\r\n\r\n    const state = this.props.dialogState.model;\r\n    const appControls  = {...this.props.appControls, update: this.updateUI};\r\n\r\n    return (\r\n      <div className='dialog-backdrop'>\r\n        <div className='modal-dialog' role='document'>\r\n          <div className='modal-content'>\r\n            <div className='modal-header modal-title'>\r\n              <dialogState.header appControls={appControls} state={state} editMode={true} />\r\n              <button type='button' className='close' aria-label='Close' onClick={this.close}>\r\n                <span aria-hidden='true'>&times;</span>\r\n              </button>\r\n            </div>\r\n            <div className='modal-body'>\r\n\r\n              <dialogState.body appControls={appControls} state={state} editMode={true} /> </div>\r\n            <div className='modal-footer'>\r\n              <button type='button' className='btn btn-primary' onClick={this.saveChanges}>\r\n                Save changes\r\n              </button>\r\n              <button type='button' className='btn btn-secondary' data-dismiss='modal' onClick={this.close}>\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { AppControls } from \"../Dashboard\";\r\nimport { EditInDialogButton } from \"../Dialogs/Dialog\";\r\n\r\nexport interface Widget<T> {\r\n  header: FunctionComponent<WidgetProps<T>>;\r\n  body: FunctionComponent<WidgetProps<T>>;\r\n  className: string;\r\n}\r\n\r\nexport interface WidgetProps<T> {\r\n  appControls: AppControls<T>;\r\n  state: T;\r\n  editMode: boolean;\r\n}\r\n\r\nexport function Widget<T> (props:WidgetProps<T> , { header, body, className }:Widget<T>) {return (\r\n  <div className={`card ${className ? className : \"\"}`}>\r\n    <div className='card-header'>{header(props)} {EditInDialogButton(props.appControls, header, body)} </div>\r\n    <div className='card-body'>{body(props)}</div>\r\n  </div>\r\n);}\r\n","export interface Dice {\r\n  name: string;\r\n  size: number;\r\n}\r\n\r\nexport type DicePool = Dice[];\r\n\r\nexport function CreateDie(size: number): Dice {\r\n  return { name: `d${size}`, size: size };\r\n}\r\n\r\nexport function Roll(dice: Dice): number {\r\n  return Math.ceil(Math.random() * dice.size);\r\n}\r\n\r\nexport function DicePoolToString(pool: DicePool) {\r\n  const combined = pool.reduce((acc, value) => {\r\n    acc.set(value.size, (acc.get(value.size) || 0) + 1);\r\n    return acc;\r\n  },\r\n  new Map<number, number>())\r\n  \r\n  return [...combined].map(([size,number]) => `${number}d${size}`).join(\", \");\r\n}\r\n\r\nconst poolFormat = /(\\d*)?d(\\d*)/gi;\r\nexport function DicePoolFromString(s: string): DicePool[] {\r\n  return s\r\n    .split('+')\r\n    .map((x) =>\r\n      [...x.matchAll(poolFormat)].reduce(\r\n        (acc, [_, size, value]) => acc.concat(Array<Dice>(parseInt(size ?? 1)).fill(CreateDie(parseInt(value)))),\r\n        [] as DicePool\r\n      )\r\n    );\r\n}\r\n\r\nexport function RollPool(...dice: DicePool): number {\r\n  return [\r\n    ...dice\r\n      .map(Roll)\r\n      .reduce((acc, value) => {\r\n        acc.set(value, (acc.get(value) || 0) + 1);\r\n        return acc;\r\n      }, new Map<number, number>())\r\n      .entries()\r\n  ].reduce((total, [roll, amount]) => Math.max(total, roll * amount), 0);\r\n}\r\n","import * as Dice from './Dice';\r\nimport { Attribute } from './Attribute';\r\nimport { Character, GetAttributes } from './Character';\r\nimport { Identable, nextId } from './Helpers/Collections';\r\n\r\nexport type Skill = Identable & SkillData;\r\n\r\nexport function ToDie(model: Skill) {\r\n  return Dice.CreateDie(model.level * 2);\r\n}\r\n\r\nexport const MaxSkillLevel = 6;\r\nexport const MinSkillLevel = 2;\r\n\r\nexport function NewSkill(character: Character, skill?: Partial<SkillData>): Skill {\r\n  return {\r\n    name: skill?.name ?? 'New Skill',\r\n    level: skill?.level ?? 2,\r\n    attribute: skill?.attribute ?? GetAttributes(character)[0],\r\n    key: nextId(character.skills)\r\n  };\r\n}\r\n\r\ninterface SkillData {\r\n  name: string;\r\n  level: number;\r\n  attribute: Attribute;\r\n}\r\n","export type Identable = {key:number}\r\n\r\nexport function nextId(collection:Identable[]):number {\r\n    return collection.reduce((acc, val) => acc > val.key? acc : val.key, 0 ) + 1;\r\n}","import * as Dice from './Dice';\r\nimport { Identable } from './Helpers/Collections';\r\n\r\nexport type CharacterAttribute = Attribute & { baseValue: number };\r\nexport type Attribute = Identable & AttributeData;\r\n\r\ninterface AttributeData {\r\n  name: string;\r\n  shortName: string;\r\n  isPhysical: boolean;\r\n  isMental: boolean;\r\n}\r\n\r\nexport function GetDiceFromAttributeTotal(value: number): Dice.Dice[] {\r\n  if (value <= 0) return [Dice.CreateDie(2)];\r\n  if (value >= 36) return [Dice.CreateDie(20)];\r\n  return [Dice.CreateDie(2 + Math.floor(value / 6) * 2)];\r\n}\r\n\r\nexport function GetDefaultAttributes(): Attribute[] {\r\n  return defaults;\r\n}\r\n\r\nconst defaults: Attribute[] = [\r\n  {\r\n    name: 'Power',\r\n    shortName: 'Pow',\r\n    isMental: false,\r\n    isPhysical: true\r\n  },\r\n  {\r\n    name: 'Finesse',\r\n    shortName: 'Fin',\r\n    isMental: false,\r\n    isPhysical: true\r\n  },\r\n  {\r\n    name: 'Resilience',\r\n    shortName: 'Res',\r\n    isMental: false,\r\n    isPhysical: true\r\n  },\r\n  {\r\n    name: 'Intellect',\r\n    shortName: 'Int',\r\n    isMental: false,\r\n    isPhysical: true\r\n  },\r\n  {\r\n    name: 'Wits',\r\n    shortName: 'Wit',\r\n    isMental: false,\r\n    isPhysical: true\r\n  },\r\n  {\r\n    name: 'Presence',\r\n    shortName: 'Pre',\r\n    isMental: false,\r\n    isPhysical: true\r\n  }\r\n].map((a, i) => ({ ...a, key: i }));\r\n","import { Attribute, GetDefaultAttributes } from './Attribute';\r\nimport Fateds from '../Data/Fated.json';\r\nimport { Identable } from './Helpers/Collections';\r\n\r\nexport type Fated = FatedData & Identable;\r\ninterface FatedData {\r\n  name: string;\r\n  attribute: Attribute;\r\n}\r\n\r\nconst fatedData = Fateds;\r\nconst defaultFated = fatedData.map((x, i) => ({ ...x, attribute: GetDefaultAttributes()[x.attribute - 1], key: i }));\r\n\r\nexport function GetDefaultFated(): Fated[] {\r\n  return defaultFated;\r\n}\r\n","import { Fated, GetDefaultFated } from \"./Fated\";\r\nimport { Identable } from \"./Helpers/Collections\";\r\nimport Blessings from \"../Data/Blessings.json\"\r\n\r\nexport type Blessing = BlessingData & Identable;\r\nexport type BlessingData = {\r\n  name: string;\r\n  fated: Fated;\r\n  level: number;\r\n  effect: string;\r\n};\r\n\r\nexport function GetDefaultBlessings(): Blessing[] {\r\n  return defaultBlessings;\r\n}\r\n\r\nconst blessingsData = Blessings;\r\n\r\nconst defaultBlessings = blessingsData.map((x, i) => ({ ...x, fated:GetDefaultFated()[x.fated-1], key: i }));\r\n\r\n\r\n/*\r\n$once\r\n[\r\n$each\r\n{\r\n\"name\": \"$1\",\r\n\"effect\": \"$2\",\r\n\"level\": $0,\r\n\"fated\": 1\r\n},\r\n{\r\n\"name\": \"$3\",\r\n\"effect\": \"$4\",\r\n\"level\": $0,\r\n\"fated\": 2\r\n},\r\n{\r\n\"name\": \"$5\",\r\n\"effect\": \"$6\",\r\n\"level\": $0,\r\n\"fated\": 3\r\n},\r\n{\r\n\"name\": \"$7\",\r\n\"effect\": \"$8\",\r\n\"level\": $0,\r\n\"fated\": 4\r\n},\r\n{\r\n\"name\": \"$9\",\r\n\"effect\": \"$10\",\r\n\"level\": $0,\r\n\"fated\": 5\r\n},\r\n{\r\n\"name\": \"$11\",\r\n\"effect\": \"$12\",\r\n\"level\": $0,\r\n\"fated\": 6\r\n},\r\n$once\r\n]\r\n*/","import { Totem } from './Totem';\r\nimport { Skill, NewSkill } from './Skill';\r\nimport { Attribute, GetDefaultAttributes, CharacterAttribute } from './Attribute';\r\nimport { GetDefaultFated } from './Fated';\r\nimport { GetDefaultBlessings as GetBlessingsList } from './Blessings';\r\nimport { UpdateMember } from './Interfaces/Lenses';\r\n\r\nexport interface Character {\r\n  name: string;\r\n  player: string;\r\n  age: number;\r\n  gender: string;\r\n  bio: string;\r\n  attributes: CharacterAttribute[];\r\n  skills: Skill[];\r\n  totem: Totem;\r\n}\r\n\r\nexport function GetAttributeTotal(character: Character, attribute: Attribute, inCity: boolean): number {\r\n  return (\r\n    GetAttributeBaseValue(character, attribute) +\r\n    GetAttributeSkillTotal(character, attribute) +\r\n    (!inCity && character.totem.fated.some((f) => f.nexusBonus && f.attribute.key === attribute.key) ? 6 : 0)\r\n  );\r\n}\r\n\r\nexport function GetAttributeSkillTotal(character: Character, attribute: Attribute): number {\r\n  return character.skills.reduce(\r\n    (total, skill) => total + (skill.attribute.key === attribute.key ? skill.level : 0),\r\n    0\r\n  );\r\n}\r\n\r\nexport function GetAttributeBaseValue(character: Character, attribute: Attribute): number {\r\n  var item = character.attributes.find((a) => a === attribute);\r\n  if (item) return item.baseValue;\r\n  throw new Error('Invalid Attribute!');\r\n}\r\n\r\nexport function GetAttributes(character: Character): CharacterAttribute[] {\r\n  return character.attributes;\r\n}\r\n\r\nconst defaultSkillsInfo = [\r\n  {\r\n    level: 6,\r\n    name: 'Jumping'\r\n  },\r\n  {\r\n    level: 4,\r\n    name: 'Climbing'\r\n  },\r\n  {\r\n    level: 3,\r\n    name: 'Parkour'\r\n  }\r\n];\r\n\r\nexport function CreateTestCharacter(): Character {\r\n  const char: Character = {\r\n    name: 'test',\r\n    player: 'test',\r\n    age: 3,\r\n    gender: 'test',\r\n    bio: 'test',\r\n    attributes: GetDefaultAttributes().map((a) => ({ ...a, baseValue: 6 })),\r\n    skills: [],\r\n    totem: { blessings: [], fated: [ ...GetDefaultFated().map(f => ({...f, nexusBonus: false, selected: false }))] }\r\n  };\r\n  defaultSkillsInfo.forEach((x) => char.skills.push(NewSkill(char, x)));\r\n  char.totem.blessings = GetBlessingsList()\r\n    .filter((b) => char.totem.fated.map((fated) => fated.key).includes(b.fated.key))\r\n    .slice(0, 5);\r\n\r\n  return char;\r\n}\r\n\r\nexport const UpdateSkillList: UpdateMember<Skill[], Character> = (map) => (old) => ({\r\n  ...old,\r\n  skills: map(old.skills)\r\n});\r\n\r\nexport const UpdateAttributeList: UpdateMember<CharacterAttribute[], Character> = (map) => (old) => ({\r\n  ...old,\r\n  attributes: map(old.attributes)\r\n});\r\n","import { Skill } from '../Skill';\r\nimport { GetDefaultAttributes, CharacterAttribute } from '../Attribute';\r\nimport { GetDefaultFated, Fated } from '../Fated';\r\nimport { Blessing } from '../Blessings';\r\nimport { Character } from '../Character';\r\n\r\ntype VersionSaveData = {\r\n  version: 1;\r\n  data: CharacterSaveDataV1;\r\n} |\r\n{\r\n  version: 2;\r\n  character: CharacterSaveDataV2;\r\n};\r\n\r\ninterface CharacterSaveDataV1 {\r\n  name: string;\r\n  player: string;\r\n  age: number;\r\n  gender: string;\r\n  bio: string;\r\n  attributes: number[];\r\n  skills: Skill[];\r\n  totem: {\r\n    fated: Fated[];\r\n    blessings: Blessing[];\r\n  };\r\n}\r\ninterface CharacterSaveDataV2 {\r\n  name: string;\r\n  player: string;\r\n  age: number;\r\n  gender: string;\r\n  bio: string;\r\n  attributes: CharacterAttribute[];\r\n  skills: Skill[];\r\n  totem: { fated: (Fated & { nexusBonus: boolean; selected: boolean; })[]; blessings: Blessing[]; };\r\n}\r\n\r\nexport function CharacterToJson(character: Character): string {\r\n  const saveData: VersionSaveData = {\r\n    version: 2,\r\n    character: character\r\n  };\r\n  return JSON.stringify(saveData);\r\n}\r\n\r\nexport function JsonToCharacter(json: string): Character {\r\n  const saveData: VersionSaveData = JSON.parse(json);\r\n  if (saveData.version === 1)\r\n    return {\r\n      ...saveData.data,\r\n      attributes: GetDefaultAttributes().map((a, i) => ({ ...a, baseValue: saveData.data.attributes[i] })),\r\n      totem: {\r\n        ...saveData.data.totem,\r\n        fated: GetDefaultFated().map((f) => ({\r\n          ...f,\r\n          selected: saveData.data.totem.fated.some((saved) => saved.key === f.key),\r\n          nexusBonus: saveData.data.totem.fated[0].key === f.key\r\n        }))\r\n      }\r\n    };\r\n  if (saveData.version === 2)\r\n    return { ...saveData.character, totem: { ...saveData.character.totem } };\r\n\r\n  throw new Error('Invalid save data!');\r\n}\r\n","export type Update<T> = (update: (old: T) => T) => void;\r\nexport type UpdateMember<Property, Object> = (update: (old: Property) => Property) => (old: Object) => Object;\r\n\r\nexport type UpdateListItem<T> = (item: T, updated: T) => void;\r\nexport type AddListItem<T> = (item: T) => void;\r\nexport type RemoveListItem<T> = (item: T) => void;\r\n\r\nexport interface ListAccessors<Property> {\r\n  update: UpdateListItem<Property>;\r\n  add: AddListItem<Property>;\r\n  remove: AddListItem<Property>;\r\n}\r\n\r\nexport const GetCollectionLens: <Member, Class>(\r\n  map: UpdateMember<Member[], Class>,\r\n  update: Update<Class>\r\n) => ListAccessors<Member> = (map, update) => ({\r\n  add: (skill) => update(map((old) => old.concat(skill))),\r\n  update: (skill, updated) => update(map((old) => old.map((s) => (s !== skill ? s : updated)))),\r\n  remove: (item) => update(map((old) => old.filter((s) => s !== item)))\r\n});\r\n","import { GetDiceFromAttributeTotal, CharacterAttribute } from '../../../Models/Attribute';\r\nimport React, { FunctionComponent, ReactElement, Fragment } from 'react';\r\nimport {\r\n  Character,\r\n  GetAttributeSkillTotal,\r\n  GetAttributeTotal,\r\n  GetAttributes,\r\n  GetAttributeBaseValue,\r\n  UpdateAttributeList\r\n} from '../../../Models/Character';\r\nimport { Update, GetCollectionLens } from '../../../Models/Interfaces/Lenses';\r\nimport './AttributesWidget.css';\r\nimport { Widget, WidgetProps } from './Widget';\r\n\r\ntype AttributeRowProps = {\r\n  character: Character;\r\n  attribute: CharacterAttribute;\r\n  editMode: boolean;\r\n  updateCharacter: Update<Character>;\r\n};\r\n\r\nconst WidgetHeader: FunctionComponent<{}> = () => <h5 className={'modal-title'}>Attributes</h5>;\r\n\r\nexport const className = 'attribute-widget';\r\n\r\nexport const WidgetBody: FunctionComponent<WidgetProps<Character>> = ({ state, appControls: { update }, editMode }) => (\r\n  <table className=\"attribute-grid\">\r\n    <thead className=\"attribute-header\">\r\n      <tr>\r\n        <th className=\"attribute-title\"> Name </th>\r\n        <th className=\"attribute-base\"> Base </th>\r\n        <th className=\"attribute-skills\"> Skills </th>\r\n        <th className=\"attribute-total\"> Total </th>\r\n        <th className=\"attribute-dice\"> Dice </th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {GetAttributes(state).map((attribute) => (\r\n        <AttributeWidgetRow\r\n          updateCharacter={update}\r\n          editMode={editMode}\r\n          attribute={attribute}\r\n          character={state}\r\n          key={attribute.key}\r\n        />\r\n      ))}\r\n    </tbody>\r\n  </table>\r\n);\r\n\r\nconst AttributeWidgetRow: FunctionComponent<AttributeRowProps> = ({\r\n  attribute,\r\n  character,\r\n  editMode,\r\n  updateCharacter\r\n}) => {\r\n  const baseValue = GetAttributeBaseValue(character, attribute);\r\n  const attributeLens = GetCollectionLens<CharacterAttribute, Character>(UpdateAttributeList, updateCharacter);\r\n  let baseAttributeElement: ReactElement;\r\n  if (editMode)\r\n    baseAttributeElement = (\r\n      <input\r\n        type=\"number\"\r\n        defaultValue={baseValue}\r\n        className={`attribute-base`}\r\n        onChange={(event) => {\r\n          const newVal = event.target.valueAsNumber;\r\n          if (!isNaN(newVal)) attributeLens.update(attribute, { ...attribute, baseValue: newVal });\r\n        }}\r\n      />\r\n    );\r\n  else baseAttributeElement = <Fragment> {baseValue} </Fragment>;\r\n\r\n  return (\r\n    <tr className=\"attribute-row\">\r\n      <td className={`attribute-title ${attribute.name}`}>{attribute.name}</td>\r\n      <td className={`attribute-base ${attribute.name}`}> {baseAttributeElement} </td>\r\n      <td className={`attribute-skills ${attribute.name}`}>{GetAttributeSkillTotal(character, attribute)}</td>\r\n      <td className={`attribute-total ${attribute.name}`}>{GetAttributeTotal(character, attribute, true)}</td>\r\n      <td className={`attribute-dice ${attribute.name}`}>\r\n        {GetDiceFromAttributeTotal(GetAttributeTotal(character, attribute, true)).map((d) => d.name)} (\r\n        {GetDiceFromAttributeTotal(GetAttributeTotal(character, attribute, false)).map((d) => d.name)})\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport const AttributeWidgetConstructor: Widget<Character> = {\r\n  header: WidgetHeader,\r\n  body: WidgetBody,\r\n  className: 'attribute-widget'\r\n};\r\n","import React, { FunctionComponent, Fragment } from 'react';\r\nimport { WidgetProps, Widget } from './Widget';\r\nimport { Skill, ToDie, NewSkill, MaxSkillLevel, MinSkillLevel } from '../../../Models/Skill';\r\nimport './SkillsWidget.css';\r\nimport { Attribute } from '../../../Models/Attribute';\r\nimport { Character, UpdateSkillList, GetAttributes } from '../../../Models/Character';\r\nimport { ListAccessors, GetCollectionLens } from '../../../Models/Interfaces/Lenses';\r\n\r\nconst WidgetHeader: FunctionComponent<WidgetProps<Character>> = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <h5 className={'modal-title'}>Skills</h5>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst WidgetBody: FunctionComponent<WidgetProps<Character>> = ({ state, editMode, appControls: { update } }) => {\r\n  const skillLens = GetCollectionLens(UpdateSkillList, update);\r\n  return (\r\n    <Fragment>\r\n      <table className=\"skill-grid table-condensed\">\r\n        <thead className=\"skill-header\">\r\n          <tr>\r\n            <th className=\"skill-name\">Skill Name</th>\r\n            <th className=\"skill-level\"> Level </th>\r\n            <th className=\"skill-attribute\"> Attribute </th>\r\n            <th className=\"skill-dice\"> Dice </th>\r\n            <th className={'skill-delete'}> </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {state.skills.map((skill) =>\r\n            editMode ? EditBodyRow(skill, skillLens, GetAttributes(state)) : WidgetBodyRow(skill)\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <div className=\"skill-add\">\r\n        {editMode ? (\r\n          <button className=\"btn btn-sm btn-success\" onClick={() => skillLens.add(NewSkill(state))}>\r\n            Add new skill\r\n          </button>\r\n        ) : null}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nfunction EditBodyRow(skill: Skill, { update, remove }: ListAccessors<Skill>, attributes: Attribute[]): JSX.Element {\r\n  return (\r\n    <tr className={`skill-row ${skill.attribute.name}`} key={skill.key}>\r\n      <td className={`skill-name`}>\r\n        <input\r\n          className=\"skill-name-input\"\r\n          defaultValue={skill.name}\r\n          onBlur={(e) => {\r\n            const val = e.target.value;\r\n            return update(skill, { ...skill, name: val });\r\n          }}\r\n        ></input>{' '}\r\n      </td>\r\n      <td className=\"skill-level\">\r\n        <input\r\n          type=\"number\"\r\n          max={MaxSkillLevel}\r\n          min={MinSkillLevel}\r\n          defaultValue={skill.level}\r\n          className={`skill-level`}\r\n          onChange={(event) => {\r\n            const newVal = event.target.valueAsNumber;\r\n            if (!isNaN(newVal)) update(skill, { ...skill, level: newVal });\r\n          }}\r\n        />\r\n      </td>\r\n      <td className={`skill-attribute`}>\r\n        <select\r\n          className=\"btn\"\r\n          defaultValue={skill.attribute.key}\r\n          onChange={(e) => {\r\n            const newval = attributes.find((a) => a.key === Number(e.target.value));\r\n            if (newval) update(skill, { ...skill, attribute: newval });\r\n          }}\r\n        >\r\n          {attributes.map((a) => (\r\n            <option value={a.key} key={a.key}>\r\n              {a.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </td>\r\n      <td className={`skill-dice`}> {ToDie(skill).name} </td>\r\n      <td className={'skill-delete'}>\r\n        <button type=\"button\" className=\"btn btn-outline-danger btn-sm btn\" onClick={() => remove(skill)}>\r\n          x\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\nfunction WidgetBodyRow(skill: Skill): JSX.Element {\r\n  return (\r\n    <tr className={`skill-row ${skill.attribute.name}`} key={skill.key}>\r\n      <td className={`skill-name`}> {skill.name} </td>\r\n      <td className={`skill-level`}> {skill.level} </td>\r\n      <td className={`skill-attribute`}> {skill.attribute.name} </td>\r\n      <td className={`skill-dice`}> {ToDie(skill).name} </td>\r\n      <td className={'skill-delete'}> </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport const SkillsWidget: Widget<Character> = {\r\n  header: WidgetHeader,\r\n  body: WidgetBody,\r\n  className: 'skill-widget'\r\n};\r\n","import { Fated } from './Fated';\r\nimport { Blessing } from './Blessings';\r\nimport { UpdateMember } from './Interfaces/Lenses';\r\n\r\ninterface TotemFated extends Fated {\r\n  nexusBonus: boolean;\r\n  selected: boolean;\r\n}\r\n\r\nexport interface Totem {\r\n  fated: TotemFated[];\r\n  blessings: Blessing[];\r\n}\r\n\r\nexport const UpdateFatedList: UpdateMember<TotemFated[], Totem> = (map) => (old) => ({\r\n  ...old,\r\n  fated: map(old.fated)\r\n});\r\n","import React from \"react\";\r\n\r\nexport interface DropdownProps {\r\n    collection: selectOption[]\r\n}\r\n\r\ntype selectOption = {\r\n    name:string,\r\n    key:number\r\n}\r\n\r\n\r\nexport function BuildOption(element:selectOption) { \r\nreturn (<option value={element.key} key={element.key}>{element.name}</option>)}\r\n\r\n\r\nexport const RemoveOption = <option value={-1} key={-1}> Remove </option>","import React, { FunctionComponent, Fragment } from 'react';\r\nimport { Widget, WidgetProps } from './Widget';\r\nimport { Character } from '../../../Models/Character';\r\nimport { Blessing, GetDefaultBlessings } from '../../../Models/Blessings';\r\nimport { Update, GetCollectionLens } from '../../../Models/Interfaces/Lenses';\r\nimport { Totem, UpdateFatedList } from '../../../Models/Totem';\r\nimport { RemoveOption, BuildOption } from '../../Controls/Dropdown';\r\n\r\nimport './TotemWidget.scss'\r\n\r\nconst WidgetHeader: FunctionComponent<WidgetProps<Character>> = ({\r\n  state: { totem },\r\n  editMode,\r\n  appControls: { update }\r\n}) => {\r\n  const updateTotem: Update<Totem> = (t) => update((old) => ({ ...old, totem: t(old.totem) }));\r\n  const fatedLens = GetCollectionLens(UpdateFatedList, updateTotem);\r\n  const fatedDisplay = editMode\r\n    ? totem.fated\r\n        .filter((f) => f.selected)\r\n        .map((fated) => {\r\n          return (\r\n            <select\r\n              className=\"btn\"\r\n              key={fated.key}\r\n              defaultValue={fated.key}\r\n              onChange={({ target: { value } }) => {\r\n                const newKey = Number.parseInt(value);\r\n                const newFated = totem.fated.find((fated) => fated.key === newKey);\r\n                fatedLens.update(fated, { ...fated, nexusBonus: false, selected: false });\r\n                if (newFated) fatedLens.update(newFated, { ...newFated, selected: true });\r\n              }}\r\n            >\r\n              {totem.fated\r\n                .filter((f) => !f.selected || f === fated)\r\n                .map(BuildOption)\r\n                .concat(RemoveOption)}\r\n            </select>\r\n          );\r\n        })\r\n    : totem.fated\r\n        .filter((f) => f.selected)\r\n        .map((fated) => fated.name)\r\n        .join('/');\r\n\r\n  const addButton =\r\n    editMode && totem.fated.filter((f) => f.selected).length < 3 ? (\r\n      <button\r\n        className=\"btn btn-sm btn-success\"\r\n        onClick={() => {\r\n          const newFated = totem.fated.filter((x) => !x.selected)[0];\r\n          fatedLens.update(newFated, { ...newFated, selected: true });\r\n        }}\r\n      >\r\n        +\r\n      </button>\r\n    ) : null;\r\n\r\n  return (\r\n    <div className={`header`}>\r\n      <h5 className={'modal-title'}>\r\n        {`Totem ${totem.fated.length > 0 ? ` - ` : ''}`}\r\n        {fatedDisplay}\r\n        {addButton}\r\n      </h5>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst WidgetBody: FunctionComponent<WidgetProps<Character>> = ({ state, editMode, appControls: { update } }) => {\r\n  const updateTotem: Update<Totem> = (t) => update((old) => ({ ...old, totem: t(old.totem) }));\r\n  return (\r\n    <Fragment>\r\n      <table className=\"blessing-grid\">\r\n        <thead className=\"blessing-header\">\r\n          <tr>\r\n            <th className=\"blessing-name\"> Name </th>\r\n            <th className=\"blessing-fated\"> Fated </th>\r\n            <th className=\"blessing-level\"> Level </th>\r\n            <th className=\"blessing-effect\"> Effect </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {state.totem.blessings.map((b) =>\r\n            editMode ? EditBlessingsRow(b, state, updateTotem) : DisplayBlessingsRow(b)\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <div className=\"blessing-add\">\r\n        {editMode ? (\r\n          <button\r\n            className=\"btn btn-sm btn-success\"\r\n            onClick={() => {\r\n              updateTotem((old) => ({\r\n                ...old,\r\n                blessings: old.blessings.concat(\r\n                  GetDefaultBlessings().filter(\r\n                    (x) =>\r\n                      state.totem.fated.map((x) => x.key).includes(x.fated.key) &&\r\n                      !state.totem.blessings.map((x) => x.key).includes(x.key)\r\n                  )[0]\r\n                )\r\n              }));\r\n            }}\r\n          >\r\n            Add new blessing\r\n          </button>\r\n        ) : null}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nfunction EditBlessingsRow(blessing: Blessing, char: Character, updateTotem: Update<Totem>): JSX.Element {\r\n  const updateBlessings: Update<Blessing> = (b) =>\r\n    updateTotem((old) => ({ ...old, blessings: old.blessings.map((x) => (blessing.key === x.key ? b(x) : x)) }));\r\n  const removeBlessing = () =>\r\n    updateTotem((old) => ({ ...old, blessings: old.blessings.filter((x) => x.key !== blessing.key) }));\r\n  return (\r\n    <tr key={blessing.key} className={`blessing-row ${blessing.fated.attribute.name}`}>\r\n      <td className=\"blessing-name\">\r\n        <select\r\n          defaultValue={blessing.key}\r\n          className=\"btn\"\r\n          onChange={(e) => {\r\n            const newKey = Number.parseInt(e.target.value);\r\n            console.log(newKey);\r\n            updateBlessings(() => {\r\n              return GetDefaultBlessings().find((x) => x.key === newKey)!;\r\n            });\r\n          }}\r\n        >\r\n          {GetDefaultBlessings()\r\n            .filter(\r\n              (x) =>\r\n                (char.totem.fated.map((x) => x.key).includes(x.fated.key) &&\r\n                  !char.totem.blessings.map((x) => x.key).includes(x.key)) ||\r\n                x.key === blessing.key\r\n            )\r\n            .map((b) => (\r\n              <option value={b.key} key={b.key}>\r\n                {b.name}\r\n              </option>\r\n            ))}{' '}\r\n        </select>{' '}\r\n      </td>\r\n      <td className=\"blessing-fated\"> {blessing.fated.name} </td>\r\n      <td className=\"blessing-level\"> {blessing.level} </td>\r\n      <td className=\"blessing-effect\"> {blessing.effect} </td>\r\n      <td className={'blessing-delete'}>\r\n        <button type=\"button\" className=\"btn btn-outline-danger btn-sm btn\" onClick={removeBlessing}>\r\n          x\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nfunction DisplayBlessingsRow(b: Blessing): JSX.Element {\r\n  return (\r\n    <tr key={b.key} className={`blessing-row ${b.fated.attribute.name}`}>\r\n      <td className=\"blessing-name\"> {b.name} </td>\r\n      <td className=\"blessing-fated\"> {b.fated.name} </td>\r\n      <td className=\"blessing-level\"> {b.level} </td>\r\n      <td className=\"blessing-effect\"> {b.effect} </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport const BlessingsWidget: Widget<Character> = {\r\n  header: WidgetHeader,\r\n  body: WidgetBody,\r\n  className: 'blessing-widget'\r\n};\r\n","import { Widget, WidgetProps } from './Widgets/Widget';\r\nimport React, { Fragment } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Dialog, DialogParams, DialogSection } from './Dialogs/Dialog';\r\nimport { CreateTestCharacter, Character } from '../../Models/Character';\r\nimport { JsonToCharacter, CharacterToJson } from \"../../Models/Helpers/JsonConverter\";\r\nimport { AttributeWidgetConstructor } from './Widgets/AttributesWidget';\r\nimport { SkillsWidget } from './Widgets/SkillsWidget';\r\nimport { BlessingsWidget } from './Widgets/TotemWidget';\r\nimport { Update } from '../../Models/Interfaces/Lenses';\r\n\r\ntype AppState = {\r\n  ui: UIState<Character>;\r\n  model: ModelState;\r\n};\r\n\r\nexport interface ModelState {\r\n  character: Character;\r\n}\r\n\r\nexport interface AppControls<T> {\r\n  openDialog: openDialog<T>;\r\n  update: Update<T>;\r\n}\r\n\r\nexport type openDialog<T> = (header: DialogSection<T>, body: DialogSection<T>) => void;\r\nexport type SidebarParams = {};\r\n\r\nexport interface UIState<T> {\r\n  sidebar: SidebarParams;\r\n  dialog: DialogParams<T>;\r\n}\r\n\r\nclass App extends React.Component<{}, AppState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    const savedData = localStorage.getItem('ToF-Model');\r\n    let model = null;\r\n\r\n    try {\r\n      model = savedData ? { character: JsonToCharacter(savedData) } : { character: CreateTestCharacter() };\r\n    } catch (e){\r\n      model = { character: CreateTestCharacter() };\r\n    }\r\n\r\n    this.state = {\r\n      model: model,\r\n      ui: {\r\n        sidebar: {},\r\n        dialog: {\r\n          isOpen: false,\r\n          body: () => null,\r\n          header: () => null,\r\n          model: model.character\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  updateUI: Update<UIState<Character>> = (map) => {\r\n    this.setState((state) => ({ ...state, ui: map(state.ui) }));\r\n  };\r\n\r\n  updateCharacter: Update<Character> = (map) => {\r\n    this.updateModel((model) => ({ ...model, character: map(model.character) }));\r\n  };\r\n\r\n  updateModel: Update<ModelState> = (map) => {\r\n    this.setState((state) => {\r\n      const newState: AppState = { ...state, model: map(state.model) };\r\n      localStorage.setItem('ToF-Model', CharacterToJson(newState.model.character));\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  openDialog: openDialog<Character> = (header, body) => {\r\n    this.updateUI((uiState) => ({\r\n      ...uiState,\r\n      dialog: {\r\n        isOpen: true,\r\n        header: header,\r\n        body: body,\r\n        model: this.state.model.character\r\n      }\r\n    }));\r\n  };\r\n\r\n  AppControls: AppControls<Character> = {\r\n    openDialog: this.openDialog,\r\n    update: this.updateCharacter\r\n  };\r\n\r\n  WidgetProps: () => WidgetProps<Character> = () => ({\r\n    appControls: this.AppControls,\r\n    state: this.state.model.character,\r\n    editMode: false\r\n  });\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"App card-columns\">\r\n          {Widget(this.WidgetProps(), AttributeWidgetConstructor)}\r\n          {Widget(this.WidgetProps(), SkillsWidget)}\r\n          {Widget(this.WidgetProps(), BlessingsWidget)}\r\n          <Dialog updateUI={this.updateUI} appControls={this.AppControls} dialogState={this.state.ui.dialog} />\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { FunctionComponent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBars, faCloudDownloadAlt, faCloudUploadAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport './Sidebar.scss';\r\n\r\nexport const Sidebar: FunctionComponent<{}> = () => {\r\n  return (\r\n    <nav className={`sidebar navbar-dark bg-dark`}>\r\n      <FontAwesomeIcon icon={faBars} size=\"lg\" color={'white'} className=\"menu-icon\"></FontAwesomeIcon>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/character\">Character</Link>\r\n          <ul>\r\n            <li>\r\n              <FontAwesomeIcon icon={faCloudUploadAlt} size=\"lg\" color={'white'}></FontAwesomeIcon>\r\n              Load\r\n            </li>\r\n            <li>\r\n              <FontAwesomeIcon icon={faCloudDownloadAlt} size=\"lg\" color={'white'}></FontAwesomeIcon>\r\n              Save\r\n            </li>\r\n\r\n            {/* <li className=\"nav-item\" onClick={() => appControls.update(() => CreateTestCharacter())}>\r\n              <FontAwesomeIcon icon={faCloudDownloadAlt} size=\"lg\" color={'white'}></FontAwesomeIcon>\r\n              Reset\r\n            </li> */}\r\n          </ul>\r\n        </li>\r\n        <li>\r\n          Charts\r\n          <ul>\r\n            <Link to=\"/charts/dice\">\r\n              <li>Dice</li>\r\n            </Link>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n","import { ChartPoint } from 'chart.js';\r\n\r\nexport function Simulation(method: () => number, numberOfSimulation = 10000): ChartPoint[] {\r\n  const results = simulate(numberOfSimulation, method);\r\n  return ToChartData(results).map((p) => ({ x: p.x, y: (100 * p.y) / numberOfSimulation }));\r\n}\r\n\r\nexport function ProbabilitySimulation(method: () => number, numberOfSimulation = 10000): ChartPoint[] {\r\n  const results = simulate(numberOfSimulation, method);\r\n  return ToChartData(results)\r\n    .reduceRight(\r\n      (acc, value) => {\r\n        acc.push({ x: value.x, y: value.y + acc[acc.length-1].y });\r\n        return acc;\r\n      },\r\n      [{ x: 0, y: 0 }]\r\n    )\r\n    .map((p) => ({ x: p.x, y:(100 * p.y) / numberOfSimulation })).slice(1);\r\n}\r\n\r\nfunction simulate(numberOfSimulation: number, method: () => number) {\r\n  const results = new Map<number, number>();\r\n  for (let index = 0; index < numberOfSimulation; index++) {\r\n    const result = method();\r\n    results.set(result, (results.get(result) ?? 0) + 1);\r\n  }\r\n  return results;\r\n}\r\n\r\nfunction ToChartData(results: Map<number, number>) {\r\n  return [...results.entries()].map(([value, freq]) => ({ x: value, y: freq })).sort((a, b) => a.x - b.x);\r\n}\r\n","import { FunctionComponent } from 'react';\r\nimport React from 'react';\r\nimport './DicePoolSelector.scss';\r\nimport { DicePoolToString, DicePoolFromString, DicePool } from '../../../Models/Dice';\r\n\r\nexport interface DicePoolSelectorProps {\r\n  updateDicePool: (pool: DicePool[]) => void;\r\n  pool: DicePool[];\r\n}\r\n\r\nexport const DicePoolSelector: FunctionComponent<DicePoolSelectorProps> = ({ updateDicePool, pool }) => {\r\n  return (\r\n    <div className=\"DicePoolSelector\">\r\n      <h5>Line 1</h5>\r\n      <label>Dice Pool</label>\r\n      <input\r\n        defaultValue={pool.map(p => DicePoolToString(p)).join(\" + \")}\r\n        onInput={(e) => {\r\n          if (e.target instanceof HTMLInputElement) updateDicePool(DicePoolFromString(e.target.value));\r\n        }}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n","import { FunctionComponent, useState } from 'react';\r\nimport { Scatter, ChartData } from 'react-chartjs-2';\r\nimport React from 'react';\r\nimport { ProbabilitySimulation } from '../Simulations';\r\nimport { RollPool, CreateDie,  DicePoolToString } from '../../../Models/Dice';\r\nimport { ChartOptions } from 'chart.js';\r\nimport { Dataset } from '../Chart';\r\nimport { DicePoolSelector } from './DicePoolSelector';\r\nimport Color from 'color';\r\nimport './ChartSelector.scss';\r\n\r\nexport const DiceDashboard: FunctionComponent<{}> = () => {\r\n  const [getPools, updatePools] = useState([[[CreateDie(4)]], [[CreateDie(8)]], [[CreateDie(12)]]])\r\n\r\n  const data: ChartData<Chart.ChartData> = {\r\n    labels: ['Scatter'],\r\n\r\n    datasets: getPools.map((pools, i) =>\r\n      Dataset(\r\n        ProbabilitySimulation(() => pools.reduce((acc, p) => acc + RollPool(...p), 0)),\r\n        {\r\n          label: pools.map(p => DicePoolToString(p)).join(\" + \"),\r\n          colour: Color('red').rotate((i * 360) / getPools.length)\r\n        }\r\n      )\r\n    )\r\n  };\r\n\r\n  const options: ChartOptions = {\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          scaleLabel: {\r\n            labelString:\"Roll Result\",\r\n            display:true\r\n          },\r\n          ticks: {\r\n            stepSize: 3\r\n          }\r\n        }\r\n      ],\r\n      yAxes: [\r\n        {\r\n          scaleLabel: {\r\n            labelString:\"P(Result >= X)\",\r\n            display:true\r\n          },\r\n          ticks: {\r\n            max: 100,\r\n            min: 0,\r\n            stepSize: 10\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"ChartSelector\">\r\n        {getPools.map((pool) => (\r\n          <DicePoolSelector\r\n            updateDicePool={(newValue) => {\r\n              updatePools(getPools.map((x) => (x === pool ? newValue : x)));\r\n            }}\r\n            pool={pool}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div style={{ height: 'calc(100vh - 300px)', width: '80vw' }}>\r\n        <Scatter options={options} data={data} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { ChartPoint } from \"chart.js\";\r\nimport Color from \"color\";\r\n\r\nexport function Dataset(data:ChartPoint[], {label = '', colour = Color(\"red\")} = {}):Chart.ChartDataSets {\r\n    return {\r\n        label:label,\r\n        borderColor:colour.toString(),\r\n        fill:false,\r\n        showLine:true,\r\n        data:data,\r\n        cubicInterpolationMode: \"monotone\"\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.scss';\nimport CharacterDash from './UI/Character/Dashboard';\nimport * as serviceWorker from './serviceWorker';\nimport { Switch, Route } from 'react-router';\nimport { Sidebar } from './UI/Sidebar/Sidebar';\nimport { BrowserRouter } from 'react-router-dom';\nimport { DiceDashboard } from './UI/Charts/Dice/Dashboard';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Sidebar />\n      <Switch>\n        <Route path=\"/charts/dice\">\n          <DiceDashboard />\n        </Route>\n        <Route path=\"/\">\n          <CharacterDash />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}